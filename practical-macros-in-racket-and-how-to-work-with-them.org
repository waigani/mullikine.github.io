#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-main.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="magit.css"/>
#+TITLE:     Practical macros in Racket 
#+SUBTITLE:  and how to work with them
#+AUTHOR:    Kevin R. Stravers
#+EMAIL:     mullikine@gmail.com
#+DATE:      <2017-11-17>
#+LANGUAGE:  en

* Read the original article [[https://kevin.stravers.net/2017/11/practical-macros-in-racket-and-how-to-work-with-them.html][_here_]].

| Written by: | *Kevin R. Stravers* | <2017-11-17>   |

* Practical macros in Racket and how to work with them

A macro is central in any Lisp and must be mastered in order to master
the language. However, Racket is in a state of macro chaos - at least in
the official documentation. There's ~define-syntax-rule~, ~syntax-parse~,
~syntax-case~, and so many more. How do we make sense of it? In this
tutorial we'll investigate syntax transformers in Racket so we can get a
complete picture.

* What's all this racket?

I've looked through the racket documentation and connected most of the
syntax transformers there. Here are the biggest ones and some utility
functions.

#+NAME:relationships of the various syntax transformers
[[file:macro-graph.png]]

| symbol        | meaning                                                     | example                                                                                                      |
|---------------+-------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------|
| _*Arrows*_    | Denote that ~one~ /(~->~ can be defined in terms of)/ ~the other~ | ~define-simple-macro~ /(~->~ can be defined in terms of)/ ~define-syntax-parser~.                            |
| _*Red boxes*_ | Indicate what I believe to be important _tools_             | ~define-syntax-parser~, ~define/syntax-parse~, ~syntax-protect~, ~make-set!-transformer~                     |
| _*circles*_   | Denote important _syntax primitives_.                       | ~define-syntax~, ~syntax-parse~, ~syntax-case~                                                               |
| Bold boxes    | Important but not essential.                                | ~define-syntaxes~, ~begin-for-syntax~, ~define-simple-macro~, ~syntax-parser~                                |
| Normal boxes  | Not that important, but good to know.                       | ~define~, ~syntax-arm~, ~local-expand~, ~free-identifier=?~                                                  |
|---------------+-------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------|
| Dashed boxes  | Unimportant tools that ought to be deprecated.              | ~define-syntax-rule~, ~syntax-rules~, ~with-syntax~, ~with-syntax*~, ~define-with-syntax~, ~syntax-id-rules~ |

For the new macro programmer this is quite a lot to take in, and there's
a myriad of other tools that supplement these, but I can safely say that
you can ignore everything except ~define-syntax-parser~ if you're new.
Why? Because it's a typechecking syntax transformer and allows you to
manipulate syntax in a complex manner. It also prevents you from having
to use ~define-syntax~ together with ~syntax-parse~. In essence it's a way
to define macros in a clean manner.

* DISCARD ~syntax-case~ (the *typeless* version of ~syntax-parse~). Don't use it!

+ ~syntax-case~ :: _Sucks_ because you must write additional code to check the type during /macro/-time.
+ ~syntax-parse~ :: _Rules_ because you can assert that a term is an /identifier/ *or* a /keyword/ in a declarative manner.


-----

- There are also some other differences in how _arguments are applied_ and _errors are reported_.

- ~syntax-parse~ is widely superior to ~syntax-case~.

-----

+ ~with-syntax~ :: It's ~syntax-case~'s sibling and used a little differently.

** If you do use ~syntax-case~ then you can (and should) use ~with-syntax~ too

*** ~with-syntax~ should be used alongside ~syntax-case~
~with-syntax~ is part of the same family of *_[[http://racket/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._with-syntax%29%29][Pattern-Based Syntax Matching]]_* forms as ~syntax-case~ and is nearly identical to ~syntax-case~ under the hood:
  | *Similar* to ~syntax-case~ | it matches a pattern to a syntax object                                    |
  | *Unlike* ~syntax-case~     | all patterns are matched, each to the result of a corresponding ~stx-expr~ |
  
The *result* of the ~with-syntax~ form is the result of the _last body_, which is in tail position with respect to the ~with-syntax~ form. This is what ~syntax-case~ does too.

But /don't/ use ~with-syntax~ with ~syntax-parse~!
- ~with-syntax~ is incredibly useful in and alongside ~syntax-case~, but
- inside ~syntax-parse~ we should use ~#:with~ instead for the same type of functionality.

*** Examples: ~#:with~ vs ~with-syntax~ for use with ~define-syntax-parser~
The advantage of ~#:with~ over ~with-syntax~ is the _use of types and better
error reporting_ for ~syntax-parse~.

These examples are awkwardly under the ~syntax-case~ section.

#+BEGIN_SRC racket
  ; Define this so we can use (define-syntax-parser)
  (require syntax/parse/define)
#+END_SRC

**** ~#:with~
#+NAME:with
#+BEGIN_SRC racket
  (define-syntax-parser with-example
    [(_ a)
     #:with (b:id ...) #'(one two three)
     #'(list a 'b ...)])

  (with-example 'zero)
  ; '(zero one two three)
#+END_SRC

**** ~with-syntax~
#+NAME:with-syntax
#+BEGIN_SRC racket
  (define-syntax-parser with-example
    [(_ a)
     (with-syntax ([(b ...) #'(one two three)])
       #'(list a 'b ...))])

  (with-example 'zero)
  ; '(zero one two three)
#+END_SRC

**** ~#:with~ vs ~with-syntax~
- ~with-syntax~ uses more parentheses.
- ~#:with~ specifies type ~:id~ for ~b~

#+BEGIN_EXPORT html
<div class="org-src-container">
    <pre class="src">
 (define-syntax-parser with-example
   [(_ a)
</span><span class="magit-diff-removed">-   </span><span class="magit-diff-removed"><span class="diff-refine-removed">#:</span></span><span class="magit-diff-removed">with (b</span><span class="magit-diff-removed"><span class="diff-refine-removed">:id</span></span><span class="magit-diff-removed"> ...) #'(one two three)
-   #'(list a 'b ...)])
</span><span class="magit-diff-added">+   </span><span class="magit-diff-added"><span class="diff-refine-added">(</span></span><span class="magit-diff-added">with</span><span class="magit-diff-added"><span class="diff-refine-added">-syntax</span></span><span class="magit-diff-added"> (</span><span class="magit-diff-added"><span class="diff-refine-added">[(</span></span><span class="magit-diff-added">b ...) #'(one two three)</span><span class="magit-diff-added"><span class="diff-refine-added">])</span></span><span class="magit-diff-added">
+     #'(list a 'b ...</span><span class="magit-diff-added"><span class="diff-refine-added">)</span></span><span class="magit-diff-added">)])
</span>
</pre>
</div>
#+END_EXPORT

* TODO [#A] Learn to use the ~syntax-parse~ family

~syntax-parse~ is the primitive of the most advanced syntax transformer in
racket (as far as I know). Here are some examples of how to use ~syntax-parse~.

#+BEGIN_SRC racket
  ;; Remember to require this
  (require syntax/parse syntax/parse/define)

  ;; Or do you do this? -- either/or I guess
  (require syntax/parse/define (for-syntax racket))
#+END_SRC

** Example A: (most concise). Uses ~define-syntax-parser~
Most of the time we want to use ~define-syntax-parser~ because it saves us the effort of typing ~syntax-parse~ and ~stx~, as in the examples that follow.

#+BEGIN_SRC racket

  (define-syntax-parser name
    [(_ a b ...+)
     #'(+ a (- b ...))])

  (name 1 2 3 4)
  ; -4
#+END_SRC

#+RESULTS:
: -4

** Perfectly fine example B: (expanded). Uses ~define-syntax~
This is an expanded version of the above.

#+BEGIN_SRC racket
  (define-syntax (name stx)
    (syntax-parse stx
      [(_ a b ...+)
       #'(+ a (- b ...))]))

  (name 1 2 3 4)
  ; -4
#+END_SRC

** Perfectly fine example C: (shorthand). Uses ~define-syntax~
- ~stx~ is inferred here
#+BEGIN_SRC racket
  (define-syntax name
    (syntax-parser
      [(_ a b ...+)
       #'(+ a (- b ...))]))

  (name 1 2 3 4)
  ; -4
#+END_SRC

** ~define-syntax-parser~ vs shorthand ~define-syntax~
#+BEGIN_EXPORT html
<div class="org-src-container">
    <pre>
<span class="magit-diff-removed">-(define-syntax-parser </span><span class="magit-diff-removed"><span class="diff-refine-removed">name</span></span><span class="magit-diff-removed">
-  [(_ a b ...+)
-   #'(+ a (- b ...))])
</span><span class="magit-diff-added">+(define-syntax </span><span class="magit-diff-added"><span class="diff-refine-added">name
+  (syntax</span></span><span class="magit-diff-added">-parser
+    [(_ a b ...+)
+     #'(+ a (- b ...))]</span><span class="magit-diff-added"><span class="diff-refine-added">)</span></span><span class="magit-diff-added">)
</span>
</pre>
</div>
#+END_EXPORT

* ~make-rename-transformer~

This special transformer is basically an alias that preserves identifier
equality.

#+BEGIN_SRC racket
  (define-syntax l (make-rename-transformer #'let))
  (let ([a 1] [b 2]) (+ a b))
  ;; 3

  (l ([a 1] [b 2]) (+ a b))
  ;; 3

  (free-identifier=? #'let #'l)
  ;; #t
#+END_SRC

* ~make-set!-transformer~

Another special transformer is the ~set!-transformer~, it allows you to
transform a mutation of an identifier.

#+BEGIN_SRC racket
  (define a 0)
  (define b 1)

  (let-syntax ([a (make-set!-transformer
                   (syntax-parser #:literals (set!)
                                  [(set! _ v) #'(set! b v)]
                                  [i:id #'a]))])
    (set! a 2)
    (list a b))

  ;; '(0 2)
#+END_SRC

I haven't had much use for this in my code so far, but I guess it's fine
to keep in mind in case you need it.

* Syntax taints, what are they?

The documentation on syntax taints is confusing to me. Here's my
synopsis: It prevents the arbitrary use of identifiers: if you extract
any part of another macro's armed result, then that extracted part is
tainted and can't be used further. Allow me to exemplify:

Examples:

#+BEGIN_SRC racket
  (require syntax/parse/define)

  (define-syntax-parser a
    [(_) (syntax-protect #'(c))])
  ; (c) is armed here

  (define-syntax-parser b
    [(_)
     ; c is extracted from (c), which taints the result c
     #:with d (car (syntax-e (local-expand #'(a) 'expression #f)))
     ; the macro expander inserts d which results in #'(+ TAINTED:c),
     ; so the expander rejects this
     #'(+ d)])

  (b)
  ;; eval:22:0: #%top: cannot use identifier tainted by macro
  ;; transformation
  ;; in: #%top
#+END_SRC

This rejects the expression ~(+ c)~ because the identifier ~c~ is *tainted*.
Why is it tainted? Because ~syntax-e~ tainted it. Why did it taint it?
Because the ~syntax-object~ was *armed*.

#+BEGIN_SRC racket
  (require syntax/parse/define)
  (define c 10)

  (define-syntax-parser a
    [(_) (syntax-protect #'c)])

  (define-syntax-parser b
    [(_)
     #:with d #'(a)
     #'(displayln d)])

  (b)
  ;; 10
#+END_SRC

This shows that the expander
- accepts
  - /armed/, and
  - /clean/ syntax objects, but
- rejects
  - /tainted/ syntax objects.

* Literals

~syntax-parse~ allows the use of literals:

#+BEGIN_SRC racket
  (require syntax/parse/define)

  (define-syntax-parser my-parser
    #:datum-literals (a-word)
    [(_ a-word b-word)
     #'(begin
         (displayln 'a-word)
         (displayln 'b-word))])

  (my-parser a-word 10)

  a-word
  ;; 10
#+END_SRC

~#:literals~ is also possible. Then there's a need for an identifier to
exist in the enclosing phase:

#+BEGIN_SRC racket
  (define-syntax-parser my-parser
    #:literals (is-this-bound?)
    [(_ is-this-bound? b-word)
     #'(begin
         (displayln 'a-word)
         (displayln 'b-word))])

  (my-parser is-this-bound? 10)
  ;; eval:33:0: syntax-parser: literal is unbound in phase 0
  ;; (phase 0 relative to the enclosing module)
  ;;   at: is-this-bound?
  ;;   in: (syntax-parser #:literals (is-this-bound?) ((_
  ;; is-this-bound? b-word) (syntax (begin (displayln (quote
  ;; a-word)) (displayln (quote b-word))))))
#+END_SRC

We can use literals to discriminate between real and fake identifiers:

#+BEGIN_SRC racket
  (define-syntax-parser is-it-let?
    [(_ (~literal let)) #'#t]
    [(_ (~datum let)) #'#f]
    [_ #'#f])

  (is-it-let? let)
  ;; #t

  (let ([let 0])
    (is-it-let? let))
  ;; #f
#+END_SRC

Note that ~(~literal x)~ as a pattern is the same as specifying ~#:literals
(x)~ as keyword argument and using ~x~ as a pattern. Similarly for
~#:datum-literals (x)~.

* Experimenting with the lowest level

Using ~define-syntax~ we can define simple functions that are essentially
macros that don't pattern match. This style allows you to get to know
the low-level API, and I believe it to be very important to experiment
with to understand what ~syntax-parse~ is actually doing.

Vision is the most important thing, let's look at what's going on!

#+BEGIN_SRC racket
  ; Note: a macro only takes on argument, which contains the entire syntax object
  (define-syntax (name stx)
    (displayln stx))

  (name hello world)
  ;; #<syntax:39:0 (name hello world)>
  ;; name: received value from syntax expander was not syntax
  ;; received: #<void>
#+END_SRC

We need to add a result that is a syntax object:

#+BEGIN_SRC racket
  (define-syntax (name stx)
    (displayln stx)
    #'(void))

  (name hello world)
  ;; #<syntax:41:0 (name hello world)>
#+END_SRC

Now to extract some values. There are primitives used to extract
information from syntax objects.

#+BEGIN_SRC racket
  (define-syntax (name stx)
    (displayln `("stx" ,stx))
    (displayln `("syntax-e" ,(syntax-e stx)))
    (displayln `("syntax->list" ,(syntax->list stx)))
    (displayln `("syntax-source" ,(syntax-source stx)))
    (displayln `("syntax-line" ,(syntax-line stx)))
    (displayln `("syntax-column" ,(syntax-column stx)))
    (displayln `("syntax-position" ,(syntax-position stx)))
    (displayln `("syntax?" ,(syntax? stx)))
    (displayln `("syntax-span" ,(syntax-span stx)))
    (displayln `("syntax-original?" ,(syntax-original? stx)))
    (displayln `("syntax-source-module" ,(syntax-source-module stx)))
    (displayln `("syntax->datum" ,(syntax->datum stx)))
    #'(void))

  (name hello world)
  ;; (stx #<syntax:43:0 (name hello world)>)
  ;; (syntax-e (#<syntax:43:0 name> #<syntax:43:0 hello> #<syntax:43:0 world>))
  ;; (syntax->list (#<syntax:43:0 name> #<syntax:43:0 hello> #<syntax:43:0 world>))
  ;; (syntax-source eval)
  ;; (syntax-line 43)
  ;; (syntax-column 0)
  ;; (syntax-position 43)
  ;; (syntax? #t)
  ;; (syntax-span 1)
  ;; (syntax-original? #f)
  ;; (syntax-source-module #f)
  ;; (syntax->datum (name hello world))
#+END_SRC

These are some of the functions that we can use on syntax objects.
There's another one that allows us to turn datums into syntax called
~datum->syntax~. Let's see if we can construct a simple macro based on
this and ~syntax-e~:

We're gonna make ~(infix 1 + 2)~ return ~(+ 1 2)~.

#+BEGIN_SRC racket
  (define-syntax (infix stx)
    (let ([elems (syntax-e stx)])
      (when (not (= (length elems) 4))
        (raise-syntax-error "there should be 3 elements"))
      (datum->syntax stx `(,(caddr elems) ,(cadr elems) ,(cadddr elems)))))

  (infix 1 + 2)
  ; 3
#+END_SRC

Notice how there are 4 elements in the list, because infix is inside it
too. We also need to provide a context for ~datum->syntax~. The
identifiers used in the result will be referenced from that context. In
this case we used stx as the context. If you use ~#f~, then ~+~ won't be
found and we have an error. The macro is essentially equivalent to:

#+BEGIN_SRC racket
  (define-syntax-parser infix
    [(_ a op b)
     #'(op a b)])

  (infix 1 + 2)
  ;; 3
#+END_SRC

With ~syntax-parse~ the context is dependent on the input. This way we can
safely refer to variables from the caller's scope. This safety is what
we call "macro hygiene", and allows us to compose macros without
breaking them.

* Syntax parameters, what are they for?

+ anaphoric macro :: A macro that can define /macro-local/ variables.

This isn't composable because replacing code with anaphoric macros may
break it, I present you exhibit A, the unhygienic macro:

#+BEGIN_SRC racket
  (define-syntax (aif stx)
    (let ([elems (syntax-e stx)])
      (datum->syntax stx
                     `(let ([it ,(cadr elems)])
                        (if it ,(caddr elems) ,(cadddr elems))))))

  (define it 10)
  (aif (member 2 '(1 2 3))
       (displayln it)
       (void))
  ;; (2 3)
#+END_SRC

The programmer wanted to print 10 but instead something else got
printed. This is a trivial example but quickly balloons with bigger
programs and bigger macros.

Let's instead use ~syntax-parameters~. These can be used hygienically:

#+BEGIN_SRC racket
  (require racket/stxparam)

  (define-syntax-parameter it (syntax-parser))

  (define-syntax-parser aif
    [(_ condition then otherwise)
     #'(let ([t condition])
         (syntax-parameterize ([it (syntax-parser [_ #'t])])
           (if t then otherwise)))])

  (aif (member 2 '(1 2 3))
       (displayln it)
       (void))
  ;; (2 3)
#+END_SRC

If we now have a declaration of it, that will override the syntax
parameter.

#+BEGIN_SRC racket
  (let ([it 10])
    (aif (member 2 '(1 2 3))
         (displayln it)
         (void)))
  ;; 10
#+END_SRC

During normal racket evaluation (i.e. from a file) you'll get a
~duplicate-identifier~ error, in this context there's another error, but
the point is that there is an error instead of letting the programmer
scratch his head.

#+BEGIN_SRC racket
  (define it 10)
  (aif (member 2 '(1 2 3))
       (displayln it)
       (void))
  ;; eval:53:0: syntax-parameterize: not bound as a syntax
  ;; parameter
  ;;   at: it
  ;;   in: (syntax-parameterize ((it (syntax-parser (_ (syntax
  ;; t))))) (if t (displayln it) (void)))
#+END_SRC

* I don't get it, how does ~syntax-parse~ work?

~syntax-parse~ works by *replacing* _all syntax objects after the pattern
match_ with the results from the pattern match:

#+BEGIN_SRC racket
  (syntax-parse #'(this is some syntax)
    [(here is the pattern) #'(pattern is put here)])
  ;; #<syntax:58:0 (syntax is put this)>
#+END_SRC

~put~ is _*not* in the pattern_, so it's just pasted /as-is/.

** Another cool thing: you can run arbitrary code in the body:

#+BEGIN_SRC racket
  (syntax-parse #'(this is some syntax)
    [(here is the pattern)
     (displayln "This is arbitrary code, we could download webpages for use in this macro, whatever you wish")
     #'(pattern is put here)])

  ;; This is arbitrary code, we could download webpages for use in this macro, whatever you wish
  ;; #<syntax:59:0 (syntax is put this)>
#+END_SRC

** There are also some special pattern forms:

#+BEGIN_SRC racket
  (syntax-parse #'(this is some syntax)
    [(here ...) #'(here ... put stuff)])
  ;; #<syntax:60:0 (this is some syntax put stuff)>
#+END_SRC

*** Table of forms
| syntax | description                                                                                                                                                                                                         |
|----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~...~          | a postfix operator that makes ~syntax-parse~ consider whatever is before as a list of that pattern. It will expand this list in the expander when it is encountered. This allows us to create pretty complex macros |
| ~...+~         | means one or more.                                                                                                                                                                                                  |

#+BEGIN_SRC racket
  (syntax-parse #'((this is) (some syntax))
    [((here there) ...+) #'(here ... there ... put stuff)])
  ;; #<syntax:61:0 (this some is syntax put stuff)>
#+END_SRC

*** They can even be nested

#+BEGIN_SRC racket
  (syntax-parse #'((this is) (some more stuff syntax))
    [((here ... there) ...+) #'(here ... ... there ... put stuff)])
  ;; #<syntax:62:0 (this some more stuff is synt...>
#+END_SRC

Note that the ~...~ operator in the syntax has left-associativity, so:
- ~here ... ...~ /reduces to/ (in this case) ~((this) (some more stuff)) ...  ...~
- which /reduces to/ ~(this) ... (some more stuff) ...~
- which /reduces to/ ~this some more stuff~

* Read the original article [[https://kevin.stravers.net/2017/11/practical-macros-in-racket-and-how-to-work-with-them.html][_here_]].

* Take-away notes

** parts of syntax

| syntax         | description | family         | use |
|----------------+-------------+----------------+-----|
| ~#with~ |             | ~syntax-parse~ | ✓   |
| ~with-syntax~  |             | ~syntax-case~  | ✗   |

** syntax transformer families

| family         | description                          | use |
|----------------+--------------------------------------+-----|
| ~syntax-parse~ | the most advanced                    | ✓   |
| ~syntax-case~  | the typeless version of syntax-parse | ✗   |
