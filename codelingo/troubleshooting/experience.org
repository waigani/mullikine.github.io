* go/empty-slice
** codelingo.yaml ramblings while writing query
#+BEGIN_SRC yaml
  # I want to make sure that this has no var and it has no {}
  # Therefore I need to also capture the parent facts
  # Or not. assign_statement is not a decl_statement.
  # I want to turn thisinto a decl_statement.

  # BUT, it's not EVERY assign_stmt that needs fixing. What here differentiates it?
#+END_SRC

https://github.com/mullikine/codelingo/blob/master/tenets/codelingo/go/empty-slice/codelingo.yaml

** yaml
#+BEGIN_SRC yaml
  tenets:
    - name: empty-slice
      flows:
        codelingo/rewrite:
        codelingo/docs:
          title: Empty Slice
          body: |
            Find empty slice assignments.
        codelingo/review:
          comment: You should declare this using "var" not ":=" see https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-slices
      query: |
        import codelingo/ast/go
  
        @review comment
        @rewrite --replace "var {{identName}} {{identType}}"
        go.assign_stmt(depth = any):
          go.lhs:
            go.ident:
              child_count == 0
              name as identName
              type as identType
          tok == ":="
          go.rhs:
            go.composite_lit:
              child_count == 1 # This asserts that there is only the below child (and not a go.elts:)
              go.array_type
#+END_SRC

** tok == ":="
This does not appear in the playground-generated query.
But it was essential to have this in the CLQL.

** type as identType
The tenet may be finished but I'm unsure if what comes out of identType is
guaranteed to be valid go.

In the example, identType equals "[]string". I'm relying on a shortcut
without testing for all the different things that might come out of
typeName.

* go/nil-only-functions
I added two rewrites who's sole purpose was to remove two different facts / nodes.
It took about 2 minutes total to work out what I was doing and then implement the rewrite.

* go/println-format-strings
This is tricky because the review uses regex to match an ident name and the rewrite will be different depending on what case the rewrite name was.

#+BEGIN_SRC python
  regex(/^(Sp|P)rint(ln)?$/, identName)
#+END_SRC

It could be ~Sprint~, ~Print~, ~Sprintln~ or ~Println~.

Do functions work in rewrite now? They should do.
If they did not they I would have to create multiple tenets or use an ~anyof~ for each specific case.

I will write this with a function to rewrite.

** After the above distraction, working out what to do and implementing rewrite took about 10 seconds
#+BEGIN_SRC yaml
  @rewrite --replace "{{identName}}f"
#+END_SRC

* go/reallocated-slice
Placing this on the backburnder until I can get a working review from anywhere.
Because the query is so long and I want to reverse-engineer it, I want to run a review to query the variables.
It would be nice if I could query the variables a different way.

* go/sprintf
This query was quite easy to write.

** Desirable features not present in CLQL
- The way to asser that there are no additional facts is to say subling_
- Assert what is matched is all that is matched, for particular properties.

** A little concerned with how I'm writing this
Make sure this expression is not more than what we are matching. This is important if we are to rewrite it, because we are deleting and recreating the entire node.

** It appears that you can only have one ~@rewrite~ statement
Only one of them will be recognised.

*** This is the way I would like to write it
Note that:
- There are two ~@rewrite~ statements.
  This approach:
  - minimises the number of variable captures we need to represent the rewrite.
  - minimises the complexity of the rewrite.
  - Makes multi-line rewrites more viable.
  - Means that if the query was only matching a subset of the code, i.e if more parameters were supplied to errors.New
    It would not erase the other parameters.

#+BEGIN_SRC yaml
  tenets:
    - name: sprintf-error
      flows:
        codelingo/rewrite:
        codelingo/docs:
          title: Sprintf Error
          body: |
            Find instances of 'errors.New(fmt.Sprintf(...))'.
        codelingo/review:
          comment: Should replace errors.New(fmt.Sprintf(...)) with errors.Errorf(...).
      query: |
        import codelingo/ast/go
  
        @review comment
        go.call_expr(depth = any):
          go.selector_expr:
            go.ident:
              name == "errors"
            @rewrite -r "Errorf"
            go.ident:
              name == "New"
          go.args:
            @rewrite -r "\"{{formatString}}\""
            go.call_expr:
              go.selector_expr:
                go.ident:
                  name == "fmt"
                go.ident:
                  name == "Sprintf"
              go.args:
                go.basic_lit:
                  child_count == 0
                  kind == "string"
                  value as formatString
#+END_SRC

*** This is the way I needed to write it
#+BEGIN_SRC yaml
  tenets:
    - name: sprintf-error
      flows:
        codelingo/rewrite:
        codelingo/docs:
          title: Sprintf Error
          body: |
            Find instances of 'errors.New(fmt.Sprintf(...))'.
        codelingo/review:
          comment: Should replace errors.New(fmt.Sprintf(...)) with errors.Errorf(...).
      query: |
        import codelingo/ast/go
  
        @review comment
        @rewrite -r "errors.Errorf(\"{{formatString}}\")"
        go.call_expr(depth = any):
          go.selector_expr:
            go.ident:
              name == "errors"
            go.ident:
              name == "New"
          go.args:
            go.call_expr:
              go.selector_expr:
                go.ident:
                  name == "fmt"
                go.ident:
                  name == "Sprintf"
              go.args:
                go.basic_lit:
                  child_count == 0
                  kind == "string"
                  value as formatString
#+END_SRC

But unfortunately, it doesn't work due to another bug.
https://github.com/mullikine/mullikine.github.io/blob/master/codelingo/troubleshooting/tenets/sprintf_need-multiple-rewrites-and-unbackslash-rewrite.org

* go/unconvert
I had to go to sublime to get the child_count fact.

Facts hidden from the playground need to be more accessible.

** Better defaults?
[[/home/shane/notes2018/ws/codelingo/clql/improvements/feature-requests.org][improvements/feature-requests.org]]

* go/unused-private-functions
Rewrite is not very informative.

#+BEGIN_SRC yaml
  ORIGINAL_DIR: $HOME/source/git/mullikine/codelingo/tenets/codelingo/go/unused-private-functions

  cd "/tmp/td_XBBmzM"; $HOME/scripts/lingo run rewrite

  unused-private-functions
  Syncing your repo...
  Running rewrite flow...

    +

  [o]pen [k]eep [d]iscard : k
  1 modifications made to file /tmp/td_XBBmzM/main/main.go
#+END_SRC

** I think a ~@rewrite -d~ would be nicer than this
#+BEGIN_SRC python
  @rewrite -r ""
#+END_SRC