#+TITLE: troubleshooting new tenet ~~
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://mullikine.github.io/org-main.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://mullikine.github.io/magit.css"/>

* Problem


** ~example.go~
#+BEGIN_SRC go
  // ./src/dpf/dpf.go
  package dpf
  
  func dpf() {}
  
  // ./src/dpf/dpf_integration_test.go
  // +build integration
  
  package dpf_test
  
  func Testdpf() {
  	dpf()
  }
  
  // ./src/opf/opf_integration_test.go
  
  
  package opf_test
  
  func Testopf() {
  	opf()
  }
  
  // ./src/opf/opf.go
  package opf
  
  func opf() {}
  
  // ./src/dof/dof_integration_test.go
  // +build integration
  
  package dofinvalid
  
  func Testdof() {
  	dof()
  }
  
  // ./src/dof/dof.go
  package dof
  
  func dof() {}
  
  // ./src/doo/dooinvalid.go
  // +build integration
  
  package dooinvalid
  
  func Testdoo() {
  	doo()
  }
  
  // ./src/doo/doo.go
  package doo
  
  func doo() {}
  
  // ./src/ooo/oooinvalid.go
  
  
  package oooinvalid
  
  func Testooo() {
  	ooo()
  }
  
  // ./src/ooo/ooo.go
  package ooo
  
  func ooo() {}
  
  // ./src/dpo/dpo.go
  package dpo
  
  func dpo() {}
  
  // ./src/dpo/dpoinvalid.go
  // +build integration
  
  package dpo_test
  
  func Testdpo() {
  	dpo()
  }
  
  // ./src/opo/opo.go
  package opo
  
  func opo() {}
  
  // ./src/opo/opoinvalid.go
  
  
  package opo_test
  
  func Testopo() {
  	opo()
  }
  
  // ./src/oof/oof_integration_test.go
  
  
  package oofinvalid
  
  func Testoof() {
  	oof()
  }
  
  // ./src/oof/oof.go
  package oof
  
  func oof() {}
  
  // ./generate_tests.go
  package main
  
  import (
  	"fmt"
  	"io/ioutil"
  	"os"
  	"path/filepath"
  )
  
  type srccode struct {
  	hasIntegrationDirective bool
  	hasValidFilename        bool
  	hasValidPackage         bool
  }
  
  // Integration tests must have a build directive, a certain filename, and a certain
  // package name. Generate a test file for each possible combination of having/missing
  //  those characteristics.
  func main() {
  	for _, example := range []srccode{
  		{false, false, false},
  		{false, false, true},
  		{false, true, false},
  		{false, true, true},
  		{true, false, false},
  		{true, false, true},
  		{true, true, false},
  		{true, true, true},
  	} {
  		var idString string
  		var integrationDirective = ""
  		if example.hasIntegrationDirective {
  			integrationDirective = "// +build integration"
  			idString += "d"
  		} else {
  			idString += "o"
  		}
  
  		if example.hasValidPackage {
  			idString += "p"
  		} else {
  			idString += "o"
  		}
  
  		if example.hasValidFilename {
  			idString += "f"
  		} else {
  			idString += "o"
  		}
  
  		testPackageName := idString
  		if example.hasValidPackage {
  			testPackageName += "_test"
  		} else {
  			testPackageName += invalidator
  		}
  
  		testFileName := idString
  		if example.hasValidFilename {
  			testFileName += "_integration_test"
  		} else {
  			testFileName += invalidator
  		}
  
  		testFileName = filepath.Join("src", idString, testFileName+".go")
  		dirFileName := filepath.Join("src", idString)
  		srcFileName := filepath.Join("src", idString, idString+".go")
  
  		if _, err := os.Stat(dirFileName); os.IsNotExist(err) {
  			os.Mkdir(dirFileName, os.FileMode(0777))
  		}
  
  		fileMode := os.FileMode(0666)
  		err := ioutil.WriteFile(testFileName, []byte(fmt.Sprintf(
  			testFileTemplate,
  			integrationDirective,
  			testPackageName,
  			idString,
  			idString,
  		)), fileMode)
  		if err != nil {
  			panic(err)
  		}
  
  		err = ioutil.WriteFile(srcFileName, []byte(fmt.Sprintf(
  			srcFileTemplate,
  			idString,
  			idString,
  		)), fileMode)
  		if err != nil {
  			panic(err)
  		}
  	}
  }
  
  var invalidator = "invalid"
  
  var testFileTemplate = `
  %s
  
  package %s
  
  func Test%s() {
  	%s()
  }
  `[1:]
  
  var srcFileTemplate = `
  package %s
  
  func %s() {}
  `[1:]
  
#+END_SRC

** This ~codelingo.yaml~ fails
#+BEGIN_SRC yaml
  funcs:
  - name: append
    type: resolver
    body: |
      function (a, b) {
        return a + b
      }
  - name: appendIntegrationTest
    type: resolver
    body: |
      function (fname) {
        fname.replace(/\.go$/, "")
        fname.replace(/_test$/, "")
        return fname + "_integration_test.go"
      }
  - name: doesNotMatch
    type: asserter
    body: |
      function (reg, str) {
        return !str.match(reg)
      }
  tenets:
    # Tenets that ensure integration tests have the correct package name, file name,
    # and custom build directive as per https://github.com/jenkins-x/jx/blob/master/docs/contributing/hacking.md#integration-tests.
  
    # There is a test file for each possible combination of having the directive (D),
    # correct package name (P), and correct filename (F). Every combination except
    # DPF and OOO will be matched by two tenets. For example, DOO will be matched by
    # right-build-directive-wrong-file and right-build-directive-wrong-package,
    #  and OPF will be matched by right-package-wrong-build-directive and 
    # right-file-wrong-build-directive.
    # This gives a total of 12 issues.
  
    # Caveat: we don't test that the test package name is `<pkgname>_test`, we just test
    # that it ends in `_test`. Similarly we don't test that the test file name is
    # `<pkgname>_integration_test.go`, we just test that it ends in `integration_test.go`.
  
    # There is an explicit tenet for each case. See more concise possible solutions below.
    - name: right-build-directive-wrong-file
      flows:
        codelingo/docs:
          title: Append
          body: |
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
        codelingo/review:
          comment: |
            right-build-directive-wrong-file
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
        codelingo/rewrite:
      query: |
        import codelingo/ast/go
  
        go.dir(depth = any):
          go.file(depth = 0:2):
            go.ident:
              name as packageName
              doesNotMatch(/test/, packageName)
          @review comment
          go.file:
            go.comment_group:
              go.comment:
                start_offset == 0
                text == "// +build integration"
            @rewrite "{{ appendIntegrationTest(fname) }}""
            filename as fname
            doesNotMatch(/_integration_test.go/, fname)
            # filename != append("packageName", "_integration_test.go")
  
    - name: right-build-directive-wrong-package
      flows:
        codelingo/rewrite:
          name: |
            {{packageName}}_test
        codelingo/docs:
          title: Right Build Directive Wrong Package
          body:
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
        codelingo/review:
          comment: |
            right-build-directive-wrong-package
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      query: |
        import codelingo/ast/go
  
        go.dir(depth = any):
          go.file(depth = 0:2):
            @rewrite --replace name
            go.ident:
              name as packageName
              doesNotMatch(/test/, packageName)
          # @review comment
          go.file:
            go.comment_group:
              go.comment:
                start_offset == 0
                text == "// +build integration"
            # The only top level ident in a go file is (should be) the package name
            @review comment
            go.ident(depth = 0:2):
              name as testPackageName
              doesNotMatch(/_test/, testPackageName)
              # name != append(packageName, "_test")
  
    - name: right-package-wrong-build-directive
      flows:
        codelingo/rewrite:
          name: filler # non-empty rewrite section required for parse error
        codelingo/docs:
          title: Right Package Wrong Build Directive
          body:
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
        codelingo/review:
          comment: |
            right-package-wrong-build-directive
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      query: |
        import codelingo/ast/go
  
        go.dir(depth = any):
          go.file(depth = 0:2):
            go.ident:
              name as packageName
              doesNotMatch(/test/, packageName)
          @review comment
          go.file:
            # The only top level ident in a go file is (should be) the package name
            @rewrite --prepend "// +build integration"
            go.ident:
              name == append(packageName, "_test")
            exclude:
              go.comment_group:
                go.comment:
                  start_offset == 0
                  text == "// +build integration"
  
    - name: right-package-wrong-file
      flows:
        codelingo/rewrite:
          name: filler # non-empty rewrite section required for parse error
        codelingo/docs:
          title: Right Package Wrong File
          body:
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
        codelingo/review:
          comment: |
            right-package-wrong-file
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      query: |
        import codelingo/ast/go
  
        go.dir(depth = any):
          go.file(depth = 0:2):
            go.ident:
              name as packageName
              doesNotMatch(/test/, packageName)
          @review comment
          go.file:
            # The only top level ident in a go file is (should be) the package name
            go.ident:
              name == append(packageName, "_test")
            @rewrite "{{ appendIntegrationTest(fname) }}""
            filename as fname
            doesNotMatch(/_integration_test.go/, fname)
            # filename != append(packageName, "_integration_test.go")
  
    - name: right-file-wrong-build-directive
      flows:
        codelingo/rewrite:
          name: filler # non-empty rewrite section required for parse error
        codelingo/docs:
          title: Right File Wrong Build Directive
          body:
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
        codelingo/review:
          comment: |
            right-file-wrong-build-directive
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      query: |
        import codelingo/ast/go
  
        go.dir(depth = any):
          go.file(depth = 0:2):
            go.ident:
              name as packageName
              doesNotMatch(/test/, packageName)
          @review comment
          go.file:
            @rewrite --prepend "// +build integration"
            go.ident
            filename as fname
            regex(/integration_test.go/, fname)
            # filename == append(packageName, "integration_test.go")
            exclude:
              go.comment_group:
                go.comment:
                  start_offset == 0
                  text == "// +build integration"
  
    - name: right-file-wrong-package
      flows:
        codelingo/rewrite:
          name: |
            {{packageName}}_test
        codelingo/docs:
          title: Right File Wrong Package
          body:
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
        codelingo/review:
          comment: |
            right-file-wrong-package
            Integration tests should have the custom build directive `// +build integration`,
            belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      query: |
        import codelingo/ast/go
  
        go.dir(depth = any):
          go.file(depth = 0:2):
            @rewrite --replace name
            go.ident:
              name as packageName
              doesNotMatch(/test/, packageName)
          @review comment
          go.file:
            filename as fname
            regex(/integration_test.go/, fname)
            # filename == append(packageName, "integration_test.go")
            exclude:
              # The only top level ident in a go file is (should be) the package name
              go.ident:
                name as testPackagename
                regex(/_test/, testPackagename)
                # name == append(packageName, "_test")
  
  ## Better solutions:
  # Match files that have at least one of the three characteristics of an integration
  # test and are also missing at least one.
  # Failing due to "hit a uncaught error: got 0 results expecting 1 for block h, fact "common.comment_group"
  
  # @review comment
  # go.file(depth = any):
  #   any_of:
  #     filename as fname
  #     filename == append(packageName, "integration_test.go")
  #     go.comment_group:
  #       go.comment:
  #         start_offset == 0
  #         text == "// +build integration"
  #     # The only top level ident in a go file is (should be) the package name
  #     go.ident:
  #       name as testPackageName
  #       name == append(packageName, "_test")
  #   exclude:
  #     # TODO: with fragment for fully repeated code
  #     any_of:
  #       filename as fname
  #       regex(/.*_test.go, fname/)
  #       go.comment_group:
  #         go.comment:
  #           start_offset == 0
  #           text == "// +build integration"
  #       # The only top level ident in a go file is (should be) the package name
  #       go.ident:
  #         name as testPackageName
  #       name == append(packageName, "_test")
  
  # Match a file that has one or two of the three charateristics of integration tests
  # Not implemented
  # @review comment
  # go.file(depth = any):
  #   1:2_of:
  #     filename as fname
  #     filename == append(packageName, "integration_test.go")
  #     go.comment_group:
  #       go.comment:
  #         start_offset == 0
  #         text == "// +build integration"
  #     # The only top level ident in a go file is (should be) the package name
  #     go.ident:
  #       name as testPackageName
  #       name == append(packageName, "_test")
#+END_SRC

** annotated ~tty-output.log~
#+BEGIN_SRC text
  Constructing new git repo in temp folder... :: Fri Nov  2 16:53:26 NZDT 2018
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  Running: $HOME/scripts/rs -nc
          -nogit
          -noswap
          $HOME/source/git/mullikine/codelingo/tenets/codelingo/jenkinsx/intformat/
          /tmp/td_intformat7R9GTx
  /usr/bin/rsync  -a -rtlhx -pug -s  --inplace --append   --exclude .cache  --exclude .git/ --exclude .gitignore --exclude TODO  --exclude '*~' --exclude '.#*'  $HOME/source/git/mullikine/codelingo/tenets/codelingo/jenkinsx/intformat/ /tmp/td_intformat7R9GTx
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  /tmp/td_intformat7R9GTx
  Clear git remotes?
   [Yn]: y
  fatal: No such remote: codelingo
  Syncing your repo...
  Running rewrite flow...
    + dofinvalid_test
    +
  [o]pen [k]eep [d]iscard : k
    + dooinvalid_test
    +
  [o]pen [k]eep [d]iscard : k
    + doo_test
    +
  [o]pen [k]eep [d]iscard : k
    + dof_test
    +
  [o]pen [k]eep [d]iscard : k
    + dofinvalid_test
    +
  [o]pen [k]eep [d]iscard : k
    + oofinvalid_test
    +
  [o]pen [k]eep [d]iscard : k
    + dof_test
    +
  [o]pen [k]eep [d]iscard : k
    + oof_test
    +
  [o]pen [k]eep [d]iscard : k
  Sorry, an error occurred while processing your request. Please try again.
  <Check slack error>
  exit status 1
  rewrite finished
  Reformulate?
  working_dir (loop): /tmp/td_intformat7R9GTx
  : k
  :
  /home/shane/scripts/qa: line 33: MYMAP: bad array subscript
  :
  :
  /home/shane/scripts/qa: line 33: MYMAP: bad array subscript
  : S
  : B
  working_dir: /tmp/td_intformat7R9GTx
  Continue?
#+END_SRC

** repository info
| tenet source
|-
| [[https://github.com/mullikine/tenets/blob/master/blog][tenets/blog at master  mullikine/tenets  GitHub]]

| org
|-
| [[https://github.com/mullikine/mullikine.github.io/blob/master/codelingo/troubleshooting/tenets/.org][github.com/mullikine/mullikine.github.io/blob/master/codelingo/troubleshooting/tenets/.org]]

** repo state
+ url :: https://github.com/codelingo/codelingo/blob/master

|command|value|
|-
|cat /etc/issue|Ubuntu 16.04.4 LTS \n \l
|vc url|https://github.com/codelingo/codelingo
|vc get-hash|eae3300ad7c32994725f90344f7cc25edfee6eca
|vc branch|master
|go version|go version go1.11.1 linux/amd64

*** recent commits
#+BEGIN_SRC git
  commit eae3300ad7c32994725f90344f7cc25edfee6eca
  Author: Jesse Meek <waigani@gmail.com>
  
      Disable test Tenet until mem spike is fixed.
#+END_SRC

** repo state
+ url :: git@github.com:mullikine/lingo.git/blob/master

|command|value|
|-
|cat /etc/issue|Ubuntu 16.04.4 LTS \n \l
|vc url|git@github.com:mullikine/lingo.git
|vc get-hash|fc18bb8b8a83c483aa58606f0695de1e1cd55f1b
|vc branch|master
|go version|go version go1.11.1 linux/amd64

*** recent commits
#+BEGIN_SRC git
  commit fc18bb8b8a83c483aa58606f0695de1e1cd55f1b
  Merge: ca7671c 191b3c4
  Author: BlakeMScurr <blake@codelingo.io>
  
      Merge pull request #431 from BlakeMScurr/insecure
  
  commit 191b3c436d34827aec4a3913636d6b72dcf051ec
  Author: BlakeMScurr <blakemscurr@gmail.com>
  
      Allow failed cert creation for insecure connections.
#+END_SRC
