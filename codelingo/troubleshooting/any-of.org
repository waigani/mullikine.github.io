#+TITLE: troubleshooting new tenet ~looped-vars-outside~
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-main.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="magit.css"/>

* ~anyof:~ is breaking the tenet.

** example.go
#+BEGIN_SRC go
  package main

  // Heuristic:
  // ‾‾‾‾‾‾‾‾‾‾
  // '&'i inside for i. also, func(){} without (i)

  import "fmt"

  func print(pi *int) { fmt.Println(*pi) }

  func main() {
          for i := 0; i < 10; i++ { // TODO capture i (in clql)
                  defer fmt.Println(i)                    // 1) OK; prints 9 ... 0
                  defer func() { fmt.Println(i) }()       // 2) WRNG; prints "10" 10 times
                  func() { fmt.Println(i) }()             // 2.1) WRNG; prints "10" 10 times
                  func() { fmt.Println(i) }               // 2.2) WRNG; prints "10" 10 times
                  defer func(i int) { fmt.Println(i) }(i) // 3) OK
                  defer print(&i)                         // 4) WRONG; prints "10" 10 times
                  go fmt.Println(i)                       // 5) OK; prints 0 ... 9 in unpredictable order
                  go func() { fmt.Println(i) }()          // 6) WRONG; totally unpredictable.
          }

          // for key, value := range myMap {
          // 	// Same for key & value as i!
          // }
  }
#+END_SRC

** Testing
*** This fails
 #+BEGIN_SRC go
   tenets:
     - name: looped-vars-outside
       flows:
         codelingo/docs:
           title: Looped Vars Outside
           body: |
             In Go, the memory locations of loop variables are reused over iterations. Therefore, these addresses should never be allowed to escape the loop. Doing so may result in unpredictable behavior.
         codelingo/review:
           comment: Loop variable {{loopvarname}} is used outside the loop. Make a copy instead if you indent to use its value.
       query: |
         import codelingo/ast/go
      
         go.file(depth = any):
           go.for_stmt(depth = any): # important. could also use depth = 4
             go.assign_stmt:
               go.lhs:
                 go.ident:
                   name as loopvarname
             go.block_stmt:
               go.list:
                 go.expr_stmt:
                   # well, actually, i don't think the call is needed. If a bad function is defined, that's bad enough
                   # TODO Tested alone: 
                   any_of:
                     # DONE Tested alone: Works
                     # A lambda call.
                     go.call_expr: # important
                       go.func_lit: # important
                         go.args(depth = any): # or 4
                           @review comment
                           go.ident:
                             name == loopvarname
                     # TODO Tested alone: 
                     # A lambda definition
                     go.func_lit: # important
                       go.args(depth = any): # or 4
                         @review comment
                         go.ident:
                           name == loopvarname
 #+END_SRC

**** With slack error

 [[https://codelingo.slack.com/messages/GAYUSPKPU/convo/GCMBY9E23-1539924167.000100/][got 0 results expecting 1 for block x, fact "common.args"]]

*** This works (ex. A)
Removing the ~anyof:~ and including only the first branch.

#+BEGIN_SRC yaml
  tenets:
    - name: looped-vars-outside
      flows:
        codelingo/docs:
          title: Looped Vars Outside
          body: |
            In Go, the memory locations of loop variables are reused over iterations. Therefore, these addresses should never be allowed to escape the loop. Doing so may result in unpredictable behavior.
        codelingo/review:
          comment: Loop variable {{loopvarname}} is used outside the loop. Make a copy instead if you indent to use its value.
      query: |
        import codelingo/ast/go
      
        go.file(depth = any):
          go.for_stmt(depth = any): # important. could also use depth = 4
            go.assign_stmt:
              go.lhs:
                @review comment
                go.ident:
                  name as loopvarname
            go.block_stmt:
              go.list:
                go.expr_stmt:
                  # well, actually, i don't think the call is needed. If a bad function is defined, that's bad enough
                  # DONE Tested alone: Works
                  # A lambda call.
                  go.call_expr: # important
                    go.func_lit: # important
                      go.args(depth = any): # or 4
                        go.ident:
                          name == loopvarname
#+END_SRC

*** This works (ex. B)
Removing the ~anyof:~ and including only the second branch.

#+BEGIN_SRC yaml
  tenets:
    - name: looped-vars-outside
      flows:
        codelingo/docs:
          title: Looped Vars Outside
          body: |
            In Go, the memory locations of loop variables are reused over iterations. Therefore, these addresses should never be allowed to escape the loop. Doing so may result in unpredictable behavior.
        codelingo/review:
          comment: Loop variable {{loopvarname}} is used outside the loop. Make a copy instead if you indent to use its value.
      query: |
        import codelingo/ast/go
      
        go.file(depth = any):
          go.for_stmt(depth = any): # important. could also use depth = 4
            go.assign_stmt:
              go.lhs:
                @review comment
                go.ident:
                  name as loopvarname
            go.block_stmt:
              go.list:
                go.expr_stmt:
                  go.func_lit: # important
                    go.args(depth = any): # or 4
                      go.ident:
                        name == loopvarname
#+END_SRC
