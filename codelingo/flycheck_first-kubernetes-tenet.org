#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-main.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="magit.css"/>

* Creating the tenet ~flags-have-underscores~
** Selected
 #+BEGIN_SRC go
   func (f *ConfigFlags) AddFlags(flags *pflag.FlagSet) {
       flags.StringVar(f.CertFile, flagGoodName
 #+END_SRC

*** Generated CLQL (A)
 #+BEGIN_SRC yaml
   import codelingo/ast/go

   go.file(depth = any):
     go.decls:
       @playground.highlight
       go.func_decl:
         go.field_list:
           go.field:
             go.names:
               go.ident:
                 child_count == 0
                 name == "f"
                 private == "true"
                 public == "false"
                 type == "*/resource/example.go.ConfigFlags"
             go.star_expr:
               go.ident:
                 child_count == 0
                 name == "ConfigFlags"
                 private == "false"
                 public == "true"
                 type == "/resource/example.go.ConfigFlags"
         go.ident:
           child_count == 0
           name == "AddFlags"
           private == "false"
           public == "true"
         go.func_type:
           go.field_list:
             go.field:
               go.names:
                 go.ident:
                   child_count == 0
                   name == "flags"
                   private == "true"
                   public == "false"
                   type == "*invalid type"
               go.star_expr:
                 go.selector_expr:
                   go.ident:
                     child_count == 0
                     name == "pflag"
                     private == "true"
                     public == "false"
                   go.ident:
                     child_count == 0
                     name == "FlagSet"
                     private == "false"
                     public == "true"
         go.block_stmt:
           go.list:
             go.expr_stmt:
               go.call_expr:
                 go.selector_expr:
                   go.ident:
                     child_count == 0
                     name == "flags"
                     private == "true"
                     public == "false"
                     type == "*invalid type"
                   go.ident:
                     child_count == 0
                     name == "StringVar"
                     private == "false"
                     public == "true"
                 go.args:
                   go.selector_expr:
                     go.ident:
                       child_count == 0
                       name == "f"
                       private == "true"
                       public == "false"
                       type == "*/resource/example.go.ConfigFlags"
                     go.ident:
                       child_count == 0
                       name == "CertFile"
                       private == "false"
                       public == "true"
                   go.ident:
                     child_count == 0
                     name == "flagGoodName"
                     private == "true"
                     public == "false"
                     type == "untyped string"
                     value == "\"good-name\""
 #+END_SRC


*** refined CLQL (A)
 #+BEGIN_SRC yaml
   functions:
     - name: contains
       type: asserter
       body: |
         function (str, substr) {
           return str.indexOf(substr) != -1
         }
 #+END_SRC

 #+BEGIN_SRC yaml
   import codelingo/ast/go

   go.file(depth = any):
     go.decls:
       go.func_decl:
         go.func_type:
           go.field_list:
             go.field:
               go.names:
                 go.ident:
                   name as paraname
               go.star_expr:
                 go.selector_expr:
                   go.ident:
                     name == "pflag"
                   go.ident:
                     name == "FlagSet"
         go.block_stmt:
           go.list:
             go.expr_stmt:
               go.call_expr:
                 go.selector_expr:
                   go.ident:
                     name == paraname
                   go.ident:
                     name == "StringVar"
                 go.args:
                   @review.comment
                   go.ident:
                     value as flagname
                     contains(flagname, "_")
 #+END_SRC

** Selected
 #+BEGIN_SRC go
   import (
       "github.com/spf13/pflag"
 #+END_SRC

*** Generated CLQL (B)
#+BEGIN_SRC yaml
  import codelingo/ast/go

  go.file(depth = any):
    go.decls:
      go.gen_decl:
        go.import_spec:
          @playground.highlight
          go.basic_lit:
            child_count == 0
            kind == "string"
            value == "github.com/spf13/pflag"
#+END_SRC

*** Refined CLQL (B)
#+BEGIN_SRC yaml
  import codelingo/ast/go

  go.file(depth = any):
    go.decls:
      go.gen_decl:
        go.import_spec:
          go.basic_lit:
            value == "github.com/spf13/pflag"
#+END_SRC

** Removed ~@playground.highlight~, added ~@review.comment~

** Merged CLQL (A) and CLQL (B)

*** Also, removed superfluous facts and added (depth = X) arguments

#+BEGIN_SRC yaml
  import codelingo/ast/go

  go.file(depth = any):
    go.decls:
      go.import_spec(depth = 1):
        go.basic_lit:
          value == "github.com/spf13/pflag"
      go.func_decl:
        go.func_type:
          go.field_list:
            go.field:
              go.names:
                go.ident:
                  name as paraname
              go.star_expr:
                go.selector_expr:
                  go.ident:
                    name == "pflag"
                  go.ident:
                    name == "FlagSet"
        go.call_expr(depth = 3):
          go.selector_expr:
            go.ident:
              name == paraname
            go.ident:
              name == "StringVar"
          go.args:
            @review.comment
            go.ident:
              value as flagname
              contains(flagname, "_")
#+END_SRC

** kubernetes had a ~vendor~ folder and codelingo refused to injest it
 Make a ~.codelingoignore~ file within the kubernetes repository

 #+BEGIN_SRC sh
   vim ./github.com/kubernetes/kubernetes/.codelingoignore
 #+END_SRC

*** Contents of ~.codelingoignore~

 #+BEGIN_SRC text
   vendor/
 #+END_SRC

** Once you have created the ~.codelingoignore~ file there are two ways to test tenet:
*** 1. copy ~codelingo.yaml~ file into the kubernetes repository

 #+BEGIN_SRC sh
   cp ./github.com/codelingo/codelingo/tenets/codelingo/k8/flags-have-underscores/codelingo.yaml ./github.com/kubernetes/kubernetes/
 #+END_SRC

*** 2. ~cd~ into the ~kubernetes~ repository directory and run the following command
 #+BEGIN_SRC sh
   lingo run review -lingo-file ./github.com/codelingo/codelingo/tenets/codelingo/k8/flags-have-underscores/codelingo.yaml
 #+END_SRC